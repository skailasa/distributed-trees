/* automatically generated by rust-bindgen 0.55.1 */

pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 9;
pub const __clang_minor__: u32 = 0;
pub const __clang_patchlevel__: u32 = 0;
pub const __clang_version__: &'static [u8; 26usize] = b"9.0.0 (CLANG: Build#1030)\0";
pub const __GNUC_MINOR__: u32 = 2;
pub const __GNUC_PATCHLEVEL__: u32 = 1;
pub const __GNUC__: u32 = 4;
pub const __GXX_ABI_VERSION: u32 = 1002;
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__: &'static [u8; 65usize] =
    b"AOCC.LLVM.2.1.0.B1030.2019_11_12 Clang 9.0.0 (CLANG: Build#1030)\0";
pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _LP64: u32 = 1;
pub const __LP64__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u64 = 9223372036854775807;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 2147483647;
pub const __WINT_MAX__: u32 = 4294967295;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: i32 = -1;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
pub const __INTPTR_MAX__: u64 = 9223372036854775807;
pub const __UINTPTR_MAX__: i32 = -1;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 8;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 8;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
pub const __SIZEOF_SIZE_T__: u32 = 8;
pub const __SIZEOF_WCHAR_T__: u32 = 4;
pub const __SIZEOF_WINT_T__: u32 = 4;
pub const __SIZEOF_INT128__: u32 = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __PTRDIFF_WIDTH__: u32 = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __INTPTR_WIDTH__: u32 = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __SIZE_WIDTH__: u32 = 64;
pub const __WCHAR_WIDTH__: u32 = 32;
pub const __WINT_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINTPTR_WIDTH__: u32 = 64;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 18;
pub const __LDBL_DECIMAL_DIG__: u32 = 21;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 64;
pub const __LDBL_MAX_10_EXP__: u32 = 4932;
pub const __LDBL_MAX_EXP__: u32 = 16384;
pub const __LDBL_MIN_10_EXP__: i32 = -4931;
pub const __LDBL_MIN_EXP__: i32 = -16381;
pub const __POINTER_WIDTH__: u32 = 64;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __GNUC_STDC_INLINE__: u32 = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __NO_INLINE__: u32 = 1;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 21;
pub const __GCC_ASM_FLAG_OUTPUTS__: u32 = 1;
pub const __code_model_small_: u32 = 1;
pub const __amd64__: u32 = 1;
pub const __amd64: u32 = 1;
pub const __x86_64: u32 = 1;
pub const __x86_64__: u32 = 1;
pub const __SEG_GS: u32 = 1;
pub const __SEG_FS: u32 = 1;
pub const __k8: u32 = 1;
pub const __k8__: u32 = 1;
pub const __tune_k8__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const __SIZEOF_FLOAT128__: u32 = 16;
pub const unix: u32 = 1;
pub const __unix: u32 = 1;
pub const __unix__: u32 = 1;
pub const linux: u32 = 1;
pub const __linux: u32 = 1;
pub const __linux__: u32 = 1;
pub const __ELF__: u32 = 1;
pub const __gnu_linux__: u32 = 1;
pub const __FLOAT128__: u32 = 1;
pub const __STDC__: u32 = 1;
pub const __STDC_HOSTED__: u32 = 1;
pub const __STDC_VERSION__: u32 = 201112;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub const NO_TAGS_WITH_MODIFIERS: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 26;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MPI_IDENT: u32 = 0;
pub const MPI_CONGRUENT: u32 = 1;
pub const MPI_SIMILAR: u32 = 2;
pub const MPI_UNEQUAL: u32 = 3;
pub const MPI_TYPECLASS_REAL: u32 = 1;
pub const MPI_TYPECLASS_INTEGER: u32 = 2;
pub const MPI_TYPECLASS_COMPLEX: u32 = 3;
pub const MPI_TAG_UB: u32 = 1681915905;
pub const MPI_HOST: u32 = 1681915907;
pub const MPI_IO: u32 = 1681915909;
pub const MPI_WTIME_IS_GLOBAL: u32 = 1681915911;
pub const MPI_UNIVERSE_SIZE: u32 = 1681915913;
pub const MPI_LASTUSEDCODE: u32 = 1681915915;
pub const MPI_APPNUM: u32 = 1681915917;
pub const MPI_WIN_BASE: u32 = 1711276033;
pub const MPI_WIN_SIZE: u32 = 1711276035;
pub const MPI_WIN_DISP_UNIT: u32 = 1711276037;
pub const MPI_WIN_CREATE_FLAVOR: u32 = 1711276039;
pub const MPI_WIN_MODEL: u32 = 1711276041;
pub const MPI_MAX_PROCESSOR_NAME: u32 = 128;
pub const MPI_MAX_LIBRARY_VERSION_STRING: u32 = 8192;
pub const MPI_MAX_ERROR_STRING: u32 = 512;
pub const MPI_MAX_PORT_NAME: u32 = 256;
pub const MPI_MAX_OBJECT_NAME: u32 = 128;
pub const MPI_UNDEFINED: i32 = -32766;
pub const MPI_KEYVAL_INVALID: u32 = 603979776;
pub const MPI_BSEND_OVERHEAD: u32 = 96;
pub const MPI_PROC_NULL: i32 = -1;
pub const MPI_ANY_SOURCE: i32 = -2;
pub const MPI_ROOT: i32 = -3;
pub const MPI_ANY_TAG: i32 = -1;
pub const MPI_LOCK_EXCLUSIVE: u32 = 234;
pub const MPI_LOCK_SHARED: u32 = 235;
pub const MPI_VERSION: u32 = 3;
pub const MPI_SUBVERSION: u32 = 1;
pub const MPICH_NAME: u32 = 3;
pub const MPICH: u32 = 1;
pub const MPICH_HAS_C2F: u32 = 1;
pub const MPICH_VERSION: &'static [u8; 4usize] = b"3.3\0";
pub const MPICH_NUMVERSION: u32 = 30300300;
pub const MPICH_RELEASE_TYPE_ALPHA: u32 = 0;
pub const MPICH_RELEASE_TYPE_BETA: u32 = 1;
pub const MPICH_RELEASE_TYPE_RC: u32 = 2;
pub const MPICH_RELEASE_TYPE_PATCH: u32 = 3;
pub const MPI_MAX_INFO_KEY: u32 = 255;
pub const MPI_MAX_INFO_VAL: u32 = 1024;
pub const MPI_ORDER_C: u32 = 56;
pub const MPI_ORDER_FORTRAN: u32 = 57;
pub const MPI_DISTRIBUTE_BLOCK: u32 = 121;
pub const MPI_DISTRIBUTE_CYCLIC: u32 = 122;
pub const MPI_DISTRIBUTE_NONE: u32 = 123;
pub const MPI_DISTRIBUTE_DFLT_DARG: i32 = -49767;
pub const MPI_MODE_NOCHECK: u32 = 1024;
pub const MPI_MODE_NOSTORE: u32 = 2048;
pub const MPI_MODE_NOPUT: u32 = 4096;
pub const MPI_MODE_NOPRECEDE: u32 = 8192;
pub const MPI_MODE_NOSUCCEED: u32 = 16384;
pub const MPI_COMM_TYPE_SHARED: u32 = 1;
pub const MPIX_COMM_TYPE_NEIGHBORHOOD: u32 = 2;
pub const MPI_AINT_FMT_DEC_SPEC: &'static [u8; 4usize] = b"%ld\0";
pub const MPI_AINT_FMT_HEX_SPEC: &'static [u8; 4usize] = b"%lx\0";
pub const MPI_THREAD_SINGLE: u32 = 0;
pub const MPI_THREAD_FUNNELED: u32 = 1;
pub const MPI_THREAD_SERIALIZED: u32 = 2;
pub const MPI_THREAD_MULTIPLE: u32 = 3;
pub const MPI_SUCCESS: u32 = 0;
pub const MPI_ERR_BUFFER: u32 = 1;
pub const MPI_ERR_COUNT: u32 = 2;
pub const MPI_ERR_TYPE: u32 = 3;
pub const MPI_ERR_TAG: u32 = 4;
pub const MPI_ERR_COMM: u32 = 5;
pub const MPI_ERR_RANK: u32 = 6;
pub const MPI_ERR_ROOT: u32 = 7;
pub const MPI_ERR_TRUNCATE: u32 = 14;
pub const MPI_ERR_GROUP: u32 = 8;
pub const MPI_ERR_OP: u32 = 9;
pub const MPI_ERR_REQUEST: u32 = 19;
pub const MPI_ERR_TOPOLOGY: u32 = 10;
pub const MPI_ERR_DIMS: u32 = 11;
pub const MPI_ERR_ARG: u32 = 12;
pub const MPI_ERR_OTHER: u32 = 15;
pub const MPI_ERR_UNKNOWN: u32 = 13;
pub const MPI_ERR_INTERN: u32 = 16;
pub const MPI_ERR_IN_STATUS: u32 = 17;
pub const MPI_ERR_PENDING: u32 = 18;
pub const MPI_ERR_ACCESS: u32 = 20;
pub const MPI_ERR_AMODE: u32 = 21;
pub const MPI_ERR_BAD_FILE: u32 = 22;
pub const MPI_ERR_CONVERSION: u32 = 23;
pub const MPI_ERR_DUP_DATAREP: u32 = 24;
pub const MPI_ERR_FILE_EXISTS: u32 = 25;
pub const MPI_ERR_FILE_IN_USE: u32 = 26;
pub const MPI_ERR_FILE: u32 = 27;
pub const MPI_ERR_IO: u32 = 32;
pub const MPI_ERR_NO_SPACE: u32 = 36;
pub const MPI_ERR_NO_SUCH_FILE: u32 = 37;
pub const MPI_ERR_READ_ONLY: u32 = 40;
pub const MPI_ERR_UNSUPPORTED_DATAREP: u32 = 43;
pub const MPI_ERR_INFO: u32 = 28;
pub const MPI_ERR_INFO_KEY: u32 = 29;
pub const MPI_ERR_INFO_VALUE: u32 = 30;
pub const MPI_ERR_INFO_NOKEY: u32 = 31;
pub const MPI_ERR_NAME: u32 = 33;
pub const MPI_ERR_NO_MEM: u32 = 34;
pub const MPI_ERR_NOT_SAME: u32 = 35;
pub const MPI_ERR_PORT: u32 = 38;
pub const MPI_ERR_QUOTA: u32 = 39;
pub const MPI_ERR_SERVICE: u32 = 41;
pub const MPI_ERR_SPAWN: u32 = 42;
pub const MPI_ERR_UNSUPPORTED_OPERATION: u32 = 44;
pub const MPI_ERR_WIN: u32 = 45;
pub const MPI_ERR_BASE: u32 = 46;
pub const MPI_ERR_LOCKTYPE: u32 = 47;
pub const MPI_ERR_KEYVAL: u32 = 48;
pub const MPI_ERR_RMA_CONFLICT: u32 = 49;
pub const MPI_ERR_RMA_SYNC: u32 = 50;
pub const MPI_ERR_SIZE: u32 = 51;
pub const MPI_ERR_DISP: u32 = 52;
pub const MPI_ERR_ASSERT: u32 = 53;
pub const MPI_ERR_RMA_RANGE: u32 = 55;
pub const MPI_ERR_RMA_ATTACH: u32 = 56;
pub const MPI_ERR_RMA_SHARED: u32 = 57;
pub const MPI_ERR_RMA_FLAVOR: u32 = 58;
pub const MPI_T_ERR_MEMORY: u32 = 59;
pub const MPI_T_ERR_NOT_INITIALIZED: u32 = 60;
pub const MPI_T_ERR_CANNOT_INIT: u32 = 61;
pub const MPI_T_ERR_INVALID_INDEX: u32 = 62;
pub const MPI_T_ERR_INVALID_ITEM: u32 = 63;
pub const MPI_T_ERR_INVALID_HANDLE: u32 = 64;
pub const MPI_T_ERR_OUT_OF_HANDLES: u32 = 65;
pub const MPI_T_ERR_OUT_OF_SESSIONS: u32 = 66;
pub const MPI_T_ERR_INVALID_SESSION: u32 = 67;
pub const MPI_T_ERR_CVAR_SET_NOT_NOW: u32 = 68;
pub const MPI_T_ERR_CVAR_SET_NEVER: u32 = 69;
pub const MPI_T_ERR_PVAR_NO_STARTSTOP: u32 = 70;
pub const MPI_T_ERR_PVAR_NO_WRITE: u32 = 71;
pub const MPI_T_ERR_PVAR_NO_ATOMIC: u32 = 72;
pub const MPI_T_ERR_INVALID_NAME: u32 = 73;
pub const MPI_T_ERR_INVALID: u32 = 74;
pub const MPI_ERR_LASTCODE: u32 = 1073741823;
pub const MPICH_ERR_LAST_CLASS: u32 = 74;
pub const MPICH_ERR_FIRST_MPIX: u32 = 100;
pub const MPIX_ERR_PROC_FAILED: u32 = 101;
pub const MPIX_ERR_PROC_FAILED_PENDING: u32 = 102;
pub const MPIX_ERR_REVOKED: u32 = 103;
pub const MPIX_ERR_EAGAIN: u32 = 104;
pub const MPIX_ERR_NOREQ: u32 = 105;
pub const MPICH_ERR_LAST_MPIX: u32 = 105;
pub const MPIIMPL_ADVERTISES_FEATURES: u32 = 1;
pub const MPIIMPL_HAVE_MPI_INFO: u32 = 1;
pub const MPIIMPL_HAVE_MPI_COMBINER_DARRAY: u32 = 1;
pub const MPIIMPL_HAVE_MPI_TYPE_CREATE_DARRAY: u32 = 1;
pub const MPIIMPL_HAVE_MPI_COMBINER_SUBARRAY: u32 = 1;
pub const MPIIMPL_HAVE_MPI_COMBINER_DUP: u32 = 1;
pub const MPIIMPL_HAVE_MPI_GREQUEST: u32 = 1;
pub const MPIIMPL_HAVE_STATUS_SET_BYTES: u32 = 1;
pub const MPIIMPL_HAVE_STATUS_SET_INFO: u32 = 1;
pub const ROMIO_VERSION: u32 = 126;
pub const HAVE_MPI_GREQUEST: u32 = 1;
pub const MPI_MODE_RDONLY: u32 = 2;
pub const MPI_MODE_RDWR: u32 = 8;
pub const MPI_MODE_WRONLY: u32 = 4;
pub const MPI_MODE_CREATE: u32 = 1;
pub const MPI_MODE_EXCL: u32 = 64;
pub const MPI_MODE_DELETE_ON_CLOSE: u32 = 16;
pub const MPI_MODE_UNIQUE_OPEN: u32 = 32;
pub const MPI_MODE_APPEND: u32 = 128;
pub const MPI_MODE_SEQUENTIAL: u32 = 256;
pub const MPI_DISPLACEMENT_CURRENT: i32 = -54278278;
pub const MPI_SEEK_SET: u32 = 600;
pub const MPI_SEEK_CUR: u32 = 602;
pub const MPI_SEEK_END: u32 = 604;
pub const MPI_MAX_DATAREP_STRING: u32 = 128;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type MPI_Datatype = ::std::os::raw::c_int;
pub type MPI_Comm = ::std::os::raw::c_int;
pub type MPI_Group = ::std::os::raw::c_int;
pub type MPI_Win = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADIOI_FileD {
    _unused: [u8; 0],
}
pub type MPI_File = *mut ADIOI_FileD;
pub type MPI_Op = ::std::os::raw::c_int;
pub const MPIR_Win_flavor_MPI_WIN_FLAVOR_CREATE: MPIR_Win_flavor = 1;
pub const MPIR_Win_flavor_MPI_WIN_FLAVOR_ALLOCATE: MPIR_Win_flavor = 2;
pub const MPIR_Win_flavor_MPI_WIN_FLAVOR_DYNAMIC: MPIR_Win_flavor = 3;
pub const MPIR_Win_flavor_MPI_WIN_FLAVOR_SHARED: MPIR_Win_flavor = 4;
pub type MPIR_Win_flavor = ::std::os::raw::c_uint;
pub use self::MPIR_Win_flavor as MPIR_Win_flavor_t;
pub const MPIR_Win_model_MPI_WIN_SEPARATE: MPIR_Win_model = 1;
pub const MPIR_Win_model_MPI_WIN_UNIFIED: MPIR_Win_model = 2;
pub type MPIR_Win_model = ::std::os::raw::c_uint;
pub use self::MPIR_Win_model as MPIR_Win_model_t;
pub const MPIR_Topo_type_MPI_GRAPH: MPIR_Topo_type = 1;
pub const MPIR_Topo_type_MPI_CART: MPIR_Topo_type = 2;
pub const MPIR_Topo_type_MPI_DIST_GRAPH: MPIR_Topo_type = 3;
pub type MPIR_Topo_type = ::std::os::raw::c_uint;
extern "C" {
    pub static MPI_UNWEIGHTED: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static MPI_WEIGHTS_EMPTY: *mut ::std::os::raw::c_int;
}
pub type MPI_Handler_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MPI_Comm, arg2: *mut ::std::os::raw::c_int, ...),
>;
pub type MPI_Comm_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Comm_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Type_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Datatype,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Type_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Datatype,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Win_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Win,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Win_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Win,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Comm_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MPI_Comm, arg2: *mut ::std::os::raw::c_int, ...),
>;
pub type MPI_File_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MPI_File, arg2: *mut ::std::os::raw::c_int, ...),
>;
pub type MPI_Win_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MPI_Win, arg2: *mut ::std::os::raw::c_int, ...),
>;
pub type MPI_Comm_errhandler_fn = MPI_Comm_errhandler_function;
pub type MPI_File_errhandler_fn = MPI_File_errhandler_function;
pub type MPI_Win_errhandler_fn = MPI_Win_errhandler_function;
pub type MPI_Errhandler = ::std::os::raw::c_int;
pub type MPI_Request = ::std::os::raw::c_int;
pub type MPI_Message = ::std::os::raw::c_int;
pub type MPI_User_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut MPI_Datatype,
    ),
>;
pub type MPI_Copy_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Delete_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub const MPIR_Combiner_enum_MPI_COMBINER_NAMED: MPIR_Combiner_enum = 1;
pub const MPIR_Combiner_enum_MPI_COMBINER_DUP: MPIR_Combiner_enum = 2;
pub const MPIR_Combiner_enum_MPI_COMBINER_CONTIGUOUS: MPIR_Combiner_enum = 3;
pub const MPIR_Combiner_enum_MPI_COMBINER_VECTOR: MPIR_Combiner_enum = 4;
pub const MPIR_Combiner_enum_MPI_COMBINER_HVECTOR_INTEGER: MPIR_Combiner_enum = 5;
pub const MPIR_Combiner_enum_MPI_COMBINER_HVECTOR: MPIR_Combiner_enum = 6;
pub const MPIR_Combiner_enum_MPI_COMBINER_INDEXED: MPIR_Combiner_enum = 7;
pub const MPIR_Combiner_enum_MPI_COMBINER_HINDEXED_INTEGER: MPIR_Combiner_enum = 8;
pub const MPIR_Combiner_enum_MPI_COMBINER_HINDEXED: MPIR_Combiner_enum = 9;
pub const MPIR_Combiner_enum_MPI_COMBINER_INDEXED_BLOCK: MPIR_Combiner_enum = 10;
pub const MPIR_Combiner_enum_MPI_COMBINER_STRUCT_INTEGER: MPIR_Combiner_enum = 11;
pub const MPIR_Combiner_enum_MPI_COMBINER_STRUCT: MPIR_Combiner_enum = 12;
pub const MPIR_Combiner_enum_MPI_COMBINER_SUBARRAY: MPIR_Combiner_enum = 13;
pub const MPIR_Combiner_enum_MPI_COMBINER_DARRAY: MPIR_Combiner_enum = 14;
pub const MPIR_Combiner_enum_MPI_COMBINER_F90_REAL: MPIR_Combiner_enum = 15;
pub const MPIR_Combiner_enum_MPI_COMBINER_F90_COMPLEX: MPIR_Combiner_enum = 16;
pub const MPIR_Combiner_enum_MPI_COMBINER_F90_INTEGER: MPIR_Combiner_enum = 17;
pub const MPIR_Combiner_enum_MPI_COMBINER_RESIZED: MPIR_Combiner_enum = 18;
pub const MPIR_Combiner_enum_MPI_COMBINER_HINDEXED_BLOCK: MPIR_Combiner_enum = 19;
pub type MPIR_Combiner_enum = ::std::os::raw::c_uint;
pub type MPI_Info = ::std::os::raw::c_int;
pub type MPI_Aint = ::std::os::raw::c_long;
pub type MPI_Fint = ::std::os::raw::c_int;
pub type MPI_Count = ::std::os::raw::c_longlong;
pub type MPI_Offset = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPI_Status {
    pub count_lo: ::std::os::raw::c_int,
    pub count_hi_and_cancelled: ::std::os::raw::c_int,
    pub MPI_SOURCE: ::std::os::raw::c_int,
    pub MPI_TAG: ::std::os::raw::c_int,
    pub MPI_ERROR: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MPI_Status() {
    assert_eq!(
        ::std::mem::size_of::<MPI_Status>(),
        20usize,
        concat!("Size of: ", stringify!(MPI_Status))
    );
    assert_eq!(
        ::std::mem::align_of::<MPI_Status>(),
        4usize,
        concat!("Alignment of ", stringify!(MPI_Status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MPI_Status>())).count_lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_Status),
            "::",
            stringify!(count_lo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MPI_Status>())).count_hi_and_cancelled as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_Status),
            "::",
            stringify!(count_hi_and_cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MPI_Status>())).MPI_SOURCE as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_Status),
            "::",
            stringify!(MPI_SOURCE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MPI_Status>())).MPI_TAG as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_Status),
            "::",
            stringify!(MPI_TAG)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MPI_Status>())).MPI_ERROR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_Status),
            "::",
            stringify!(MPI_ERROR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPIR_T_enum_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPIR_T_cvar_handle_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPIR_T_pvar_handle_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPIR_T_pvar_session_s {
    _unused: [u8; 0],
}
pub type MPI_T_enum = *mut MPIR_T_enum_s;
pub type MPI_T_cvar_handle = *mut MPIR_T_cvar_handle_s;
pub type MPI_T_pvar_handle = *mut MPIR_T_pvar_handle_s;
pub type MPI_T_pvar_session = *mut MPIR_T_pvar_session_s;
extern "C" {
    pub static MPI_T_PVAR_ALL_HANDLES: *mut MPIR_T_pvar_handle_s;
}
pub const MPIR_T_verbosity_t_MPIX_T_VERBOSITY_INVALID: MPIR_T_verbosity_t = 0;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_USER_BASIC: MPIR_T_verbosity_t = 221;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_USER_DETAIL: MPIR_T_verbosity_t = 222;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_USER_ALL: MPIR_T_verbosity_t = 223;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_TUNER_BASIC: MPIR_T_verbosity_t = 224;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_TUNER_DETAIL: MPIR_T_verbosity_t = 225;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_TUNER_ALL: MPIR_T_verbosity_t = 226;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_MPIDEV_BASIC: MPIR_T_verbosity_t = 227;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_MPIDEV_DETAIL: MPIR_T_verbosity_t = 228;
pub const MPIR_T_verbosity_t_MPI_T_VERBOSITY_MPIDEV_ALL: MPIR_T_verbosity_t = 229;
pub type MPIR_T_verbosity_t = ::std::os::raw::c_uint;
pub const MPIR_T_bind_t_MPIX_T_BIND_INVALID: MPIR_T_bind_t = 0;
pub const MPIR_T_bind_t_MPI_T_BIND_NO_OBJECT: MPIR_T_bind_t = 9700;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_COMM: MPIR_T_bind_t = 9701;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_DATATYPE: MPIR_T_bind_t = 9702;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_ERRHANDLER: MPIR_T_bind_t = 9703;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_FILE: MPIR_T_bind_t = 9704;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_GROUP: MPIR_T_bind_t = 9705;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_OP: MPIR_T_bind_t = 9706;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_REQUEST: MPIR_T_bind_t = 9707;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_WIN: MPIR_T_bind_t = 9708;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_MESSAGE: MPIR_T_bind_t = 9709;
pub const MPIR_T_bind_t_MPI_T_BIND_MPI_INFO: MPIR_T_bind_t = 9710;
pub type MPIR_T_bind_t = ::std::os::raw::c_uint;
pub const MPIR_T_scope_t_MPIX_T_SCOPE_INVALID: MPIR_T_scope_t = 0;
pub const MPIR_T_scope_t_MPI_T_SCOPE_CONSTANT: MPIR_T_scope_t = 60438;
pub const MPIR_T_scope_t_MPI_T_SCOPE_READONLY: MPIR_T_scope_t = 60439;
pub const MPIR_T_scope_t_MPI_T_SCOPE_LOCAL: MPIR_T_scope_t = 60440;
pub const MPIR_T_scope_t_MPI_T_SCOPE_GROUP: MPIR_T_scope_t = 60441;
pub const MPIR_T_scope_t_MPI_T_SCOPE_GROUP_EQ: MPIR_T_scope_t = 60442;
pub const MPIR_T_scope_t_MPI_T_SCOPE_ALL: MPIR_T_scope_t = 60443;
pub const MPIR_T_scope_t_MPI_T_SCOPE_ALL_EQ: MPIR_T_scope_t = 60444;
pub type MPIR_T_scope_t = ::std::os::raw::c_uint;
pub const MPIR_T_pvar_class_t_MPIX_T_PVAR_CLASS_INVALID: MPIR_T_pvar_class_t = 0;
pub const MPIR_T_pvar_class_t_MPIR_T_PVAR_CLASS_FIRST: MPIR_T_pvar_class_t = 240;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_STATE: MPIR_T_pvar_class_t = 240;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_LEVEL: MPIR_T_pvar_class_t = 241;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_SIZE: MPIR_T_pvar_class_t = 242;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_PERCENTAGE: MPIR_T_pvar_class_t = 243;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_HIGHWATERMARK: MPIR_T_pvar_class_t = 244;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_LOWWATERMARK: MPIR_T_pvar_class_t = 245;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_COUNTER: MPIR_T_pvar_class_t = 246;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_AGGREGATE: MPIR_T_pvar_class_t = 247;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_TIMER: MPIR_T_pvar_class_t = 248;
pub const MPIR_T_pvar_class_t_MPI_T_PVAR_CLASS_GENERIC: MPIR_T_pvar_class_t = 249;
pub const MPIR_T_pvar_class_t_MPIR_T_PVAR_CLASS_LAST: MPIR_T_pvar_class_t = 250;
pub const MPIR_T_pvar_class_t_MPIR_T_PVAR_CLASS_NUMBER: MPIR_T_pvar_class_t = 10;
pub type MPIR_T_pvar_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub static mut MPI_F_STATUS_IGNORE: *mut MPI_Fint;
}
extern "C" {
    pub static mut MPI_F_STATUSES_IGNORE: *mut MPI_Fint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPI_F08_status {
    pub count_lo: MPI_Fint,
    pub count_hi_and_cancelled: MPI_Fint,
    pub MPI_SOURCE: MPI_Fint,
    pub MPI_TAG: MPI_Fint,
    pub MPI_ERROR: MPI_Fint,
}
#[test]
fn bindgen_test_layout_MPI_F08_status() {
    assert_eq!(
        ::std::mem::size_of::<MPI_F08_status>(),
        20usize,
        concat!("Size of: ", stringify!(MPI_F08_status))
    );
    assert_eq!(
        ::std::mem::align_of::<MPI_F08_status>(),
        4usize,
        concat!("Alignment of ", stringify!(MPI_F08_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MPI_F08_status>())).count_lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_F08_status),
            "::",
            stringify!(count_lo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MPI_F08_status>())).count_hi_and_cancelled as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_F08_status),
            "::",
            stringify!(count_hi_and_cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MPI_F08_status>())).MPI_SOURCE as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_F08_status),
            "::",
            stringify!(MPI_SOURCE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MPI_F08_status>())).MPI_TAG as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_F08_status),
            "::",
            stringify!(MPI_TAG)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MPI_F08_status>())).MPI_ERROR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MPI_F08_status),
            "::",
            stringify!(MPI_ERROR)
        )
    );
}
extern "C" {
    pub static mut MPIR_F08_MPI_STATUS_IGNORE_OBJ: MPI_F08_status;
}
extern "C" {
    pub static mut MPIR_F08_MPI_STATUSES_IGNORE_OBJ: [MPI_F08_status; 1usize];
}
extern "C" {
    pub static mut MPIR_F08_MPI_IN_PLACE: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut MPIR_F08_MPI_BOTTOM: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut MPI_F08_STATUS_IGNORE: *mut MPI_F08_status;
}
extern "C" {
    pub static mut MPI_F08_STATUSES_IGNORE: *mut MPI_F08_status;
}
pub type MPI_Grequest_cancel_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Grequest_free_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type MPI_Grequest_query_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut MPI_Status,
    ) -> ::std::os::raw::c_int,
>;
pub type MPIX_Grequest_poll_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut MPI_Status,
    ) -> ::std::os::raw::c_int,
>;
pub type MPIX_Grequest_wait_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: f64,
        arg4: *mut MPI_Status,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Datarep_conversion_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: MPI_Datatype,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: MPI_Offset,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Datarep_extent_function = ::std::option::Option<
    unsafe extern "C" fn(
        datatype: MPI_Datatype,
        arg1: *mut MPI_Aint,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn MPI_Send(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Recv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_count(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ssend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Buffer_attach(
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Buffer_detach(
        buffer_addr: *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Isend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Issend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Irsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Irecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Wait(request: *mut MPI_Request, status: *mut MPI_Status) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Test(
        request: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Request_free(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        indx: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        indx: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Probe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cancel(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Test_cancelled(
        status: *const MPI_Status,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Send_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ssend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Recv_init(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Start(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Startall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Sendrecv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Sendrecv_replace(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_contiguous(
        count: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_vector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_hvector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_indexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_hindexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *mut ::std::os::raw::c_int,
        array_of_displacements: *mut MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_struct(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *mut ::std::os::raw::c_int,
        array_of_displacements: *mut MPI_Aint,
        array_of_types: *mut MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Address(
        location: *mut ::std::os::raw::c_void,
        address: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_extent(datatype: MPI_Datatype, extent: *mut MPI_Aint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_size(
        datatype: MPI_Datatype,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_lb(
        datatype: MPI_Datatype,
        displacement: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_ub(
        datatype: MPI_Datatype,
        displacement: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_commit(datatype: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_free(datatype: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_elements(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack(
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpack(
        inbuf: *const ::std::os::raw::c_void,
        insize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_size(
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Barrier(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Gather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Gatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Exscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_create(
        user_fn: MPI_User_function,
        commute: ::std::os::raw::c_int,
        op: *mut MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_free(op: *mut MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_size(
        group: MPI_Group,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_rank(
        group: MPI_Group,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_translate_ranks(
        group1: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks1: *const ::std::os::raw::c_int,
        group2: MPI_Group,
        ranks2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_compare(
        group1: MPI_Group,
        group2: MPI_Group,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_group(comm: MPI_Comm, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_union(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_intersection(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_difference(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_range_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_range_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_free(group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_size(comm: MPI_Comm, size: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_rank(comm: MPI_Comm, rank: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_compare(
        comm1: MPI_Comm,
        comm2: MPI_Comm,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_dup(comm: MPI_Comm, newcomm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_dup_with_info(
        comm: MPI_Comm,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create(
        comm: MPI_Comm,
        group: MPI_Group,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_split(
        comm: MPI_Comm,
        color: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_free(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_test_inter(
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_remote_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_remote_group(comm: MPI_Comm, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Intercomm_create(
        local_comm: MPI_Comm,
        local_leader: ::std::os::raw::c_int,
        peer_comm: MPI_Comm,
        remote_leader: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Intercomm_merge(
        intercomm: MPI_Comm,
        high: ::std::os::raw::c_int,
        newintracomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Keyval_create(
        copy_fn: MPI_Copy_function,
        delete_fn: MPI_Delete_function,
        keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Keyval_free(keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_put(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_get(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_delete(comm: MPI_Comm, keyval: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Topo_test(
        comm: MPI_Comm,
        status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_create(
        comm_old: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_cart: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dims_create(
        nnodes: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_create(
        comm_old: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graphdims_get(
        comm: MPI_Comm,
        nnodes: *mut ::std::os::raw::c_int,
        nedges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_get(
        comm: MPI_Comm,
        maxindex: ::std::os::raw::c_int,
        maxedges: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        edges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cartdim_get(
        comm: MPI_Comm,
        ndims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_get(
        comm: MPI_Comm,
        maxdims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        periods: *mut ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_rank(
        comm: MPI_Comm,
        coords: *const ::std::os::raw::c_int,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_coords(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxdims: ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_neighbors_count(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        nneighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_neighbors(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxneighbors: ::std::os::raw::c_int,
        neighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_shift(
        comm: MPI_Comm,
        direction: ::std::os::raw::c_int,
        disp: ::std::os::raw::c_int,
        rank_source: *mut ::std::os::raw::c_int,
        rank_dest: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_sub(
        comm: MPI_Comm,
        remain_dims: *const ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_map(
        comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_map(
        comm: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_processor_name(
        name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_version(
        version: *mut ::std::os::raw::c_int,
        subversion: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_library_version(
        version: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Errhandler_create(
        function: MPI_Handler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Errhandler_set(comm: MPI_Comm, errhandler: MPI_Errhandler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Errhandler_get(
        comm: MPI_Comm,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Errhandler_free(errhandler: *mut MPI_Errhandler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Error_string(
        errorcode: ::std::os::raw::c_int,
        string: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Error_class(
        errorcode: ::std::os::raw::c_int,
        errorclass: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Wtime() -> f64;
}
extern "C" {
    pub fn MPI_Wtick() -> f64;
}
extern "C" {
    pub fn MPI_Init(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Initialized(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Abort(comm: MPI_Comm, errorcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pcontrol(level: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIR_Dup_fn(
        oldcomm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Close_port(port_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_accept(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_connect(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_disconnect(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_parent(parent: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_join(
        fd: ::std::os::raw::c_int,
        intercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_spawn(
        command: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        maxprocs: ::std::os::raw::c_int,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_spawn_multiple(
        count: ::std::os::raw::c_int,
        array_of_commands: *mut *mut ::std::os::raw::c_char,
        array_of_argv: *mut *mut *mut ::std::os::raw::c_char,
        array_of_maxprocs: *const ::std::os::raw::c_int,
        array_of_info: *const MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Lookup_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Open_port(
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Publish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpublish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_info(comm: MPI_Comm, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_info(comm: MPI_Comm, info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Comm_rankpool(
        comm: MPI_Comm,
        name: *const ::std::os::raw::c_char,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Put(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_complete(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create(
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_fence(assert: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_free(win: *mut MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_group(win: MPI_Win, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_lock(
        lock_type: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_post(
        group: MPI_Group,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_start(
        group: MPI_Group,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_test(win: MPI_Win, flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_unlock(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_wait(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_allocate(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_allocate_shared(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_shared_query(
        win: MPI_Win,
        rank: ::std::os::raw::c_int,
        size: *mut MPI_Aint,
        disp_unit: *mut ::std::os::raw::c_int,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_dynamic(
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_attach(
        win: MPI_Win,
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_detach(
        win: MPI_Win,
        base: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_info(win: MPI_Win, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_info(win: MPI_Win, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Fetch_and_op(
        origin_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Compare_and_swap(
        origin_addr: *const ::std::os::raw::c_void,
        compare_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rput(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rget(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Raccumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rget_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_lock_all(assert: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_unlock_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_local(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_local_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_sync(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_class(errorclass: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_code(
        errorclass: ::std::os::raw::c_int,
        errorcode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_string(
        errorcode: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_call_errhandler(
        comm: MPI_Comm,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_keyval(
        comm_copy_attr_fn: MPI_Comm_copy_attr_function,
        comm_delete_attr_fn: MPI_Comm_delete_attr_function,
        comm_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_delete_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_free_keyval(comm_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_name(
        comm: MPI_Comm,
        comm_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_name(
        comm: MPI_Comm,
        comm_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_call_errhandler(
        fh: MPI_File,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Grequest_complete(request: MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Grequest_start(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Init_thread(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Is_thread_main(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Query_thread(provided: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_cancelled(
        status: *mut MPI_Status,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_elements(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_keyval(
        type_copy_attr_fn: MPI_Type_copy_attr_function,
        type_delete_attr_fn: MPI_Type_delete_attr_function,
        type_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_delete_attr(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_dup(oldtype: MPI_Datatype, newtype: *mut MPI_Datatype)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_free_keyval(type_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_attr(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_contents(
        datatype: MPI_Datatype,
        max_integers: ::std::os::raw::c_int,
        max_addresses: ::std::os::raw::c_int,
        max_datatypes: ::std::os::raw::c_int,
        array_of_integers: *mut ::std::os::raw::c_int,
        array_of_addresses: *mut MPI_Aint,
        array_of_datatypes: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_envelope(
        datatype: MPI_Datatype,
        num_integers: *mut ::std::os::raw::c_int,
        num_addresses: *mut ::std::os::raw::c_int,
        num_datatypes: *mut ::std::os::raw::c_int,
        combiner: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_name(
        datatype: MPI_Datatype,
        type_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_set_attr(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_set_name(
        datatype: MPI_Datatype,
        type_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_match_size(
        typeclass: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_call_errhandler(
        win: MPI_Win,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_keyval(
        win_copy_attr_fn: MPI_Win_copy_attr_function,
        win_delete_attr_fn: MPI_Win_delete_attr_function,
        win_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_delete_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_free_keyval(win_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_name(
        win: MPI_Win,
        win_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_name(
        win: MPI_Win,
        win_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alloc_mem(
        size: MPI_Aint,
        info: MPI_Info,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_errhandler(
        comm_errhandler_fn: MPI_Comm_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_errhandler(
        comm: MPI_Comm,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_errhandler(
        comm: MPI_Comm,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_create_errhandler(
        file_errhandler_fn: MPI_File_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_errhandler(
        file: MPI_File,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_errhandler(
        file: MPI_File,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Finalized(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Free_mem(base: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_address(
        location: *const ::std::os::raw::c_void,
        address: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_create(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_delete(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_dup(info: MPI_Info, newinfo: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_free(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_nkeys(
        info: MPI_Info,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_nthkey(
        info: MPI_Info,
        n: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_valuelen(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_set(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: MPI_Aint,
        position: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_external_size(
        datarep: *const ::std::os::raw::c_char,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        size: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Request_get_status(
        request: MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_c2f(
        c_status: *const MPI_Status,
        f_status: *mut MPI_Fint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_f2c(
        f_status: *const MPI_Fint,
        c_status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_darray(
        size: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        array_of_gsizes: *const ::std::os::raw::c_int,
        array_of_distribs: *const ::std::os::raw::c_int,
        array_of_dargs: *const ::std::os::raw::c_int,
        array_of_psizes: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hindexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hvector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_indexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hindexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_resized(
        oldtype: MPI_Datatype,
        lb: MPI_Aint,
        extent: MPI_Aint,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_struct(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        array_of_types: *const MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_subarray(
        ndims: ::std::os::raw::c_int,
        array_of_sizes: *const ::std::os::raw::c_int,
        array_of_subsizes: *const ::std::os::raw::c_int,
        array_of_starts: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_extent(
        datatype: MPI_Datatype,
        lb: *mut MPI_Aint,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_true_extent(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Aint,
        true_extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        insize: MPI_Aint,
        position: *mut MPI_Aint,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_errhandler(
        win_errhandler_fn: MPI_Win_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_errhandler(
        win: MPI_Win,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_errhandler(
        win: MPI_Win,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_integer(
        range: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_real(
        precision: ::std::os::raw::c_int,
        range: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_complex(
        precision: ::std::os::raw::c_int,
        range: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_local(
        inbuf: *const ::std::os::raw::c_void,
        inoutbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_commutative(
        op: MPI_Op,
        commute: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_create_adjacent(
        comm_old: MPI_Comm,
        indegree: ::std::os::raw::c_int,
        sources: *const ::std::os::raw::c_int,
        sourceweights: *const ::std::os::raw::c_int,
        outdegree: ::std::os::raw::c_int,
        destinations: *const ::std::os::raw::c_int,
        destweights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        comm_dist_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_create(
        comm_old: MPI_Comm,
        n: ::std::os::raw::c_int,
        sources: *const ::std::os::raw::c_int,
        degrees: *const ::std::os::raw::c_int,
        destinations: *const ::std::os::raw::c_int,
        weights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        comm_dist_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_neighbors_count(
        comm: MPI_Comm,
        indegree: *mut ::std::os::raw::c_int,
        outdegree: *mut ::std::os::raw::c_int,
        weighted: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_neighbors(
        comm: MPI_Comm,
        maxindegree: ::std::os::raw::c_int,
        sources: *mut ::std::os::raw::c_int,
        sourceweights: *mut ::std::os::raw::c_int,
        maxoutdegree: ::std::os::raw::c_int,
        destinations: *mut ::std::os::raw::c_int,
        destweights: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Improbe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Imrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        message: *mut MPI_Message,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Mprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Mrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_idup(
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibarrier(comm: MPI_Comm, request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Igather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Igatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iexscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_split_type(
        comm: MPI_Comm,
        split_type: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_elements_x(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_elements_x(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_extent_x(
        datatype: MPI_Datatype,
        lb: *mut MPI_Count,
        extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_true_extent_x(
        datatype: MPI_Datatype,
        lb: *mut MPI_Count,
        extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_size_x(datatype: MPI_Datatype, size: *mut MPI_Count) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_group(
        comm: MPI_Comm,
        group: MPI_Group,
        tag: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Aint_add(base: MPI_Aint, disp: MPI_Aint) -> MPI_Aint;
}
extern "C" {
    pub fn MPI_Aint_diff(addr1: MPI_Aint, addr2: MPI_Aint) -> MPI_Aint;
}
extern "C" {
    pub fn MPI_T_init_thread(
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_enum_get_info(
        enumtype: MPI_T_enum,
        num: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_enum_get_item(
        enumtype: MPI_T_enum,
        indx: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_num(num_cvar: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_info(
        cvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        binding: *mut ::std::os::raw::c_int,
        scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_handle_alloc(
        cvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_cvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_handle_free(handle: *mut MPI_T_cvar_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_read(
        handle: MPI_T_cvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_write(
        handle: MPI_T_cvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_num(num_pvar: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_info(
        pvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        var_class: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        binding: *mut ::std::os::raw::c_int,
        readonly: *mut ::std::os::raw::c_int,
        continuous: *mut ::std::os::raw::c_int,
        atomic: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_session_create(session: *mut MPI_T_pvar_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_session_free(session: *mut MPI_T_pvar_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_handle_alloc(
        session: MPI_T_pvar_session,
        pvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_pvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_handle_free(
        session: MPI_T_pvar_session,
        handle: *mut MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_start(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_stop(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_read(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_write(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_reset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_readreset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_num(num_cat: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_info(
        cat_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        num_cvars: *mut ::std::os::raw::c_int,
        num_pvars: *mut ::std::os::raw::c_int,
        num_categories: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_cvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_pvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_categories(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_changed(stamp: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_index(
        name: *const ::std::os::raw::c_char,
        cvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_index(
        name: *const ::std::os::raw::c_char,
        var_class: ::std::os::raw::c_int,
        pvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_index(
        name: *const ::std::os::raw::c_char,
        cat_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Comm_failure_ack(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Comm_failure_get_acked(
        comm: MPI_Comm,
        failedgrp: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Comm_revoke(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Comm_shrink(comm: MPI_Comm, newcomm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Comm_agree(
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Send(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Recv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_count(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ssend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Buffer_attach(
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Buffer_detach(
        buffer_addr: *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Isend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Issend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Irsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Irecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Wait(request: *mut MPI_Request, status: *mut MPI_Status) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Test(
        request: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Request_free(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        indx: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        indx: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Probe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cancel(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Test_cancelled(
        status: *const MPI_Status,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Send_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ssend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Recv_init(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Start(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Startall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Sendrecv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Sendrecv_replace(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_contiguous(
        count: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_vector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_hvector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_indexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_hindexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *mut ::std::os::raw::c_int,
        array_of_displacements: *mut MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_struct(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *mut ::std::os::raw::c_int,
        array_of_displacements: *mut MPI_Aint,
        array_of_types: *mut MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Address(
        location: *mut ::std::os::raw::c_void,
        address: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_extent(datatype: MPI_Datatype, extent: *mut MPI_Aint)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_size(
        datatype: MPI_Datatype,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_lb(
        datatype: MPI_Datatype,
        displacement: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_ub(
        datatype: MPI_Datatype,
        displacement: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_commit(datatype: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_free(datatype: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_elements(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack(
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpack(
        inbuf: *const ::std::os::raw::c_void,
        insize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_size(
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Barrier(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Gather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Gatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Exscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_create(
        user_fn: MPI_User_function,
        commute: ::std::os::raw::c_int,
        op: *mut MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_free(op: *mut MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_size(
        group: MPI_Group,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_rank(
        group: MPI_Group,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_translate_ranks(
        group1: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks1: *const ::std::os::raw::c_int,
        group2: MPI_Group,
        ranks2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_compare(
        group1: MPI_Group,
        group2: MPI_Group,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_group(comm: MPI_Comm, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_union(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_intersection(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_difference(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_range_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_range_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_free(group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_rank(
        comm: MPI_Comm,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_compare(
        comm1: MPI_Comm,
        comm2: MPI_Comm,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_dup(comm: MPI_Comm, newcomm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_dup_with_info(
        comm: MPI_Comm,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create(
        comm: MPI_Comm,
        group: MPI_Group,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_split(
        comm: MPI_Comm,
        color: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_free(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_test_inter(
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_remote_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_remote_group(comm: MPI_Comm, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Intercomm_create(
        local_comm: MPI_Comm,
        local_leader: ::std::os::raw::c_int,
        peer_comm: MPI_Comm,
        remote_leader: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Intercomm_merge(
        intercomm: MPI_Comm,
        high: ::std::os::raw::c_int,
        newintracomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Keyval_create(
        copy_fn: MPI_Copy_function,
        delete_fn: MPI_Delete_function,
        keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Keyval_free(keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_put(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_get(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_delete(comm: MPI_Comm, keyval: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Topo_test(
        comm: MPI_Comm,
        status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_create(
        comm_old: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_cart: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dims_create(
        nnodes: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_create(
        comm_old: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graphdims_get(
        comm: MPI_Comm,
        nnodes: *mut ::std::os::raw::c_int,
        nedges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_get(
        comm: MPI_Comm,
        maxindex: ::std::os::raw::c_int,
        maxedges: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        edges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cartdim_get(
        comm: MPI_Comm,
        ndims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_get(
        comm: MPI_Comm,
        maxdims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        periods: *mut ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_rank(
        comm: MPI_Comm,
        coords: *const ::std::os::raw::c_int,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_coords(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxdims: ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_neighbors_count(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        nneighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_neighbors(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxneighbors: ::std::os::raw::c_int,
        neighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_shift(
        comm: MPI_Comm,
        direction: ::std::os::raw::c_int,
        disp: ::std::os::raw::c_int,
        rank_source: *mut ::std::os::raw::c_int,
        rank_dest: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_sub(
        comm: MPI_Comm,
        remain_dims: *const ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_map(
        comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_map(
        comm: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_processor_name(
        name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_version(
        version: *mut ::std::os::raw::c_int,
        subversion: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_library_version(
        version: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Errhandler_create(
        function: MPI_Handler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Errhandler_set(comm: MPI_Comm, errhandler: MPI_Errhandler)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Errhandler_get(
        comm: MPI_Comm,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Errhandler_free(errhandler: *mut MPI_Errhandler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Error_string(
        errorcode: ::std::os::raw::c_int,
        string: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Error_class(
        errorcode: ::std::os::raw::c_int,
        errorclass: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Wtime() -> f64;
}
extern "C" {
    pub fn PMPI_Wtick() -> f64;
}
extern "C" {
    pub fn PMPI_Init(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Initialized(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Abort(comm: MPI_Comm, errorcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pcontrol(level: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Close_port(port_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_accept(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_connect(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_disconnect(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_parent(parent: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_join(
        fd: ::std::os::raw::c_int,
        intercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_spawn(
        command: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        maxprocs: ::std::os::raw::c_int,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_spawn_multiple(
        count: ::std::os::raw::c_int,
        array_of_commands: *mut *mut ::std::os::raw::c_char,
        array_of_argv: *mut *mut *mut ::std::os::raw::c_char,
        array_of_maxprocs: *const ::std::os::raw::c_int,
        array_of_info: *const MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Lookup_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Open_port(
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Publish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpublish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_info(comm: MPI_Comm, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_info(comm: MPI_Comm, info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Comm_rankpool(
        comm: MPI_Comm,
        name: *const ::std::os::raw::c_char,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Put(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_complete(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create(
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_fence(assert: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_free(win: *mut MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_group(win: MPI_Win, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_lock(
        lock_type: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_post(
        group: MPI_Group,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_start(
        group: MPI_Group,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_test(win: MPI_Win, flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_unlock(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_wait(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_allocate(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_allocate_shared(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_shared_query(
        win: MPI_Win,
        rank: ::std::os::raw::c_int,
        size: *mut MPI_Aint,
        disp_unit: *mut ::std::os::raw::c_int,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_dynamic(
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_attach(
        win: MPI_Win,
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_detach(
        win: MPI_Win,
        base: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_info(win: MPI_Win, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_info(win: MPI_Win, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Fetch_and_op(
        origin_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Compare_and_swap(
        origin_addr: *const ::std::os::raw::c_void,
        compare_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rput(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rget(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Raccumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rget_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_lock_all(assert: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_unlock_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_local(rank: ::std::os::raw::c_int, win: MPI_Win)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_local_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_sync(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_class(errorclass: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_code(
        errorclass: ::std::os::raw::c_int,
        errorcode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_string(
        errorcode: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_call_errhandler(
        comm: MPI_Comm,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_keyval(
        comm_copy_attr_fn: MPI_Comm_copy_attr_function,
        comm_delete_attr_fn: MPI_Comm_delete_attr_function,
        comm_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_delete_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_free_keyval(comm_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_name(
        comm: MPI_Comm,
        comm_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_name(
        comm: MPI_Comm,
        comm_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_call_errhandler(
        fh: MPI_File,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Grequest_complete(request: MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Grequest_start(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Init_thread(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Is_thread_main(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Query_thread(provided: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_cancelled(
        status: *mut MPI_Status,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_elements(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_keyval(
        type_copy_attr_fn: MPI_Type_copy_attr_function,
        type_delete_attr_fn: MPI_Type_delete_attr_function,
        type_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_delete_attr(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_dup(
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_free_keyval(type_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_attr(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_contents(
        datatype: MPI_Datatype,
        max_integers: ::std::os::raw::c_int,
        max_addresses: ::std::os::raw::c_int,
        max_datatypes: ::std::os::raw::c_int,
        array_of_integers: *mut ::std::os::raw::c_int,
        array_of_addresses: *mut MPI_Aint,
        array_of_datatypes: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_envelope(
        datatype: MPI_Datatype,
        num_integers: *mut ::std::os::raw::c_int,
        num_addresses: *mut ::std::os::raw::c_int,
        num_datatypes: *mut ::std::os::raw::c_int,
        combiner: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_name(
        datatype: MPI_Datatype,
        type_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_set_attr(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_set_name(
        datatype: MPI_Datatype,
        type_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_match_size(
        typeclass: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_call_errhandler(
        win: MPI_Win,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_keyval(
        win_copy_attr_fn: MPI_Win_copy_attr_function,
        win_delete_attr_fn: MPI_Win_delete_attr_function,
        win_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_delete_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_free_keyval(win_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_name(
        win: MPI_Win,
        win_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_name(
        win: MPI_Win,
        win_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alloc_mem(
        size: MPI_Aint,
        info: MPI_Info,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_errhandler(
        comm_errhandler_fn: MPI_Comm_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_errhandler(
        comm: MPI_Comm,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_errhandler(
        comm: MPI_Comm,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_create_errhandler(
        file_errhandler_fn: MPI_File_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_errhandler(
        file: MPI_File,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_errhandler(
        file: MPI_File,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Finalized(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Free_mem(base: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_address(
        location: *const ::std::os::raw::c_void,
        address: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_create(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_delete(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_dup(info: MPI_Info, newinfo: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_free(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_nkeys(
        info: MPI_Info,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_nthkey(
        info: MPI_Info,
        n: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_valuelen(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_set(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: MPI_Aint,
        position: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_external_size(
        datarep: *const ::std::os::raw::c_char,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        size: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Request_get_status(
        request: MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_c2f(
        c_status: *const MPI_Status,
        f_status: *mut MPI_Fint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_f2c(
        f_status: *const MPI_Fint,
        c_status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_darray(
        size: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        array_of_gsizes: *const ::std::os::raw::c_int,
        array_of_distribs: *const ::std::os::raw::c_int,
        array_of_dargs: *const ::std::os::raw::c_int,
        array_of_psizes: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hindexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hvector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_indexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hindexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_resized(
        oldtype: MPI_Datatype,
        lb: MPI_Aint,
        extent: MPI_Aint,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_struct(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        array_of_types: *const MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_subarray(
        ndims: ::std::os::raw::c_int,
        array_of_sizes: *const ::std::os::raw::c_int,
        array_of_subsizes: *const ::std::os::raw::c_int,
        array_of_starts: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_extent(
        datatype: MPI_Datatype,
        lb: *mut MPI_Aint,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_true_extent(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Aint,
        true_extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        insize: MPI_Aint,
        position: *mut MPI_Aint,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_errhandler(
        win_errhandler_fn: MPI_Win_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_errhandler(
        win: MPI_Win,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_errhandler(
        win: MPI_Win,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_integer(
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_real(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_complex(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_local(
        inbuf: *const ::std::os::raw::c_void,
        inoutbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_commutative(
        op: MPI_Op,
        commute: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_create_adjacent(
        comm_old: MPI_Comm,
        indegree: ::std::os::raw::c_int,
        sources: *const ::std::os::raw::c_int,
        sourceweights: *const ::std::os::raw::c_int,
        outdegree: ::std::os::raw::c_int,
        destinations: *const ::std::os::raw::c_int,
        destweights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        comm_dist_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_create(
        comm_old: MPI_Comm,
        n: ::std::os::raw::c_int,
        sources: *const ::std::os::raw::c_int,
        degrees: *const ::std::os::raw::c_int,
        destinations: *const ::std::os::raw::c_int,
        weights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        comm_dist_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_neighbors_count(
        comm: MPI_Comm,
        indegree: *mut ::std::os::raw::c_int,
        outdegree: *mut ::std::os::raw::c_int,
        weighted: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_neighbors(
        comm: MPI_Comm,
        maxindegree: ::std::os::raw::c_int,
        sources: *mut ::std::os::raw::c_int,
        sourceweights: *mut ::std::os::raw::c_int,
        maxoutdegree: ::std::os::raw::c_int,
        destinations: *mut ::std::os::raw::c_int,
        destweights: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Improbe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Imrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        message: *mut MPI_Message,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Mprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Mrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_idup(
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibarrier(comm: MPI_Comm, request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Igather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Igatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iexscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_split_type(
        comm: MPI_Comm,
        split_type: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_group(
        comm: MPI_Comm,
        group: MPI_Group,
        tag: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_elements_x(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_elements_x(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_extent_x(
        datatype: MPI_Datatype,
        lb: *mut MPI_Count,
        extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_true_extent_x(
        datatype: MPI_Datatype,
        lb: *mut MPI_Count,
        extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_size_x(datatype: MPI_Datatype, size: *mut MPI_Count) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Aint_add(base: MPI_Aint, disp: MPI_Aint) -> MPI_Aint;
}
extern "C" {
    pub fn PMPI_Aint_diff(addr1: MPI_Aint, addr2: MPI_Aint) -> MPI_Aint;
}
extern "C" {
    pub fn PMPI_T_init_thread(
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_enum_get_info(
        enumtype: MPI_T_enum,
        num: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_enum_get_item(
        enumtype: MPI_T_enum,
        indx: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_num(num_cvar: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_info(
        cvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        binding: *mut ::std::os::raw::c_int,
        scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_handle_alloc(
        cvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_cvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_handle_free(handle: *mut MPI_T_cvar_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_read(
        handle: MPI_T_cvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_write(
        handle: MPI_T_cvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_num(num_pvar: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_info(
        pvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        var_class: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        binding: *mut ::std::os::raw::c_int,
        readonly: *mut ::std::os::raw::c_int,
        continuous: *mut ::std::os::raw::c_int,
        atomic: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_session_create(session: *mut MPI_T_pvar_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_session_free(session: *mut MPI_T_pvar_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_handle_alloc(
        session: MPI_T_pvar_session,
        pvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_pvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_handle_free(
        session: MPI_T_pvar_session,
        handle: *mut MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_start(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_stop(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_read(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_write(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_reset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_readreset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_num(num_cat: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_info(
        cat_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        num_cvars: *mut ::std::os::raw::c_int,
        num_pvars: *mut ::std::os::raw::c_int,
        num_categories: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_cvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_pvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_categories(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_changed(stamp: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_index(
        name: *const ::std::os::raw::c_char,
        cvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_index(
        name: *const ::std::os::raw::c_char,
        var_class: ::std::os::raw::c_int,
        pvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_index(
        name: *const ::std::os::raw::c_char,
        cat_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Comm_failure_ack(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Comm_failure_get_acked(
        comm: MPI_Comm,
        failedgrp: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Comm_revoke(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Comm_shrink(comm: MPI_Comm, newcomm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Comm_agree(
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_open(
        comm: MPI_Comm,
        filename: *const ::std::os::raw::c_char,
        amode: ::std::os::raw::c_int,
        info: MPI_Info,
        fh: *mut MPI_File,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_close(fh: *mut MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_delete(
        filename: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_size(fh: MPI_File, size: MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_preallocate(fh: MPI_File, size: MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_size(fh: MPI_File, size: *mut MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_group(fh: MPI_File, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_amode(
        fh: MPI_File,
        amode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_info(fh: MPI_File, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_info(fh: MPI_File, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_view(
        fh: MPI_File,
        disp: MPI_Offset,
        etype: MPI_Datatype,
        filetype: MPI_Datatype,
        datarep: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_view(
        fh: MPI_File,
        disp: *mut MPI_Offset,
        etype: *mut MPI_Datatype,
        filetype: *mut MPI_Datatype,
        datarep: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_seek(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_position(fh: MPI_File, offset: *mut MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_byte_offset(
        fh: MPI_File,
        offset: MPI_Offset,
        disp: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_seek_shared(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_position_shared(
        fh: MPI_File,
        offset: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_type_extent(
        fh: MPI_File,
        datatype: MPI_Datatype,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Register_datarep(
        datarep: *const ::std::os::raw::c_char,
        read_conversion_fn: MPI_Datarep_conversion_function,
        write_conversion_fn: MPI_Datarep_conversion_function,
        dtype_file_extent_fn: MPI_Datarep_extent_function,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_atomicity(
        fh: MPI_File,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_atomicity(
        fh: MPI_File,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_sync(fh: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_f2c(file: MPI_Fint) -> MPI_File;
}
extern "C" {
    pub fn MPI_File_c2f(file: MPI_File) -> MPI_Fint;
}
extern "C" {
    #[doc = " BINDINGS FOR THE PROFILING INTERFACE"]
    pub fn PMPI_File_open(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Info,
        arg5: *mut MPI_File,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_close(arg1: *mut MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_delete(
        arg1: *const ::std::os::raw::c_char,
        arg2: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_size(arg1: MPI_File, arg2: MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_preallocate(arg1: MPI_File, arg2: MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_size(arg1: MPI_File, arg2: *mut MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_group(arg1: MPI_File, arg2: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_amode(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_info(arg1: MPI_File, arg2: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_info(arg1: MPI_File, arg2: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_view(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: MPI_Datatype,
        arg4: MPI_Datatype,
        arg5: *const ::std::os::raw::c_char,
        arg6: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_view(
        arg1: MPI_File,
        arg2: *mut MPI_Offset,
        arg3: *mut MPI_Datatype,
        arg4: *mut MPI_Datatype,
        arg5: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *const ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *const ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_at(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_at(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *const ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_seek(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_position(arg1: MPI_File, arg2: *mut MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_byte_offset(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_shared(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_shared(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_shared(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_shared(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_seek_shared(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_position_shared(
        arg1: MPI_File,
        arg2: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all_begin(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all_end(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all_begin(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *const ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
        arg5: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all_end(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all_begin(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all_end(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all_begin(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all_end(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered_begin(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered_end(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered_begin(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered_end(
        arg1: MPI_File,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_type_extent(
        arg1: MPI_File,
        arg2: MPI_Datatype,
        arg3: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Register_datarep(
        arg1: *const ::std::os::raw::c_char,
        arg2: MPI_Datarep_conversion_function,
        arg3: MPI_Datarep_conversion_function,
        arg4: MPI_Datarep_extent_function,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_atomicity(
        arg1: MPI_File,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_atomicity(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_sync(arg1: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_f2c(arg1: MPI_Fint) -> MPI_File;
}
extern "C" {
    pub fn PMPI_File_c2f(arg1: MPI_File) -> MPI_Fint;
}
pub type MPIX_Grequest_class = ::std::os::raw::c_int;
extern "C" {
    pub fn MPIX_Grequest_class_create(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        poll_fn: MPIX_Grequest_poll_function,
        wait_fn: MPIX_Grequest_wait_function,
        greq_class: *mut MPIX_Grequest_class,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Grequest_class_allocate(
        greq_class: MPIX_Grequest_class,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Grequest_start(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        poll_fn: MPIX_Grequest_poll_function,
        wait_fn: MPIX_Grequest_wait_function,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpixi_mutex_s {
    _unused: [u8; 0],
}
pub type MPIX_Mutex = *mut mpixi_mutex_s;
extern "C" {
    pub fn MPIX_Mutex_create(
        count: ::std::os::raw::c_int,
        comm: MPI_Comm,
        hdl: *mut MPIX_Mutex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Mutex_free(hdl: *mut MPIX_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Mutex_lock(
        hdl: MPIX_Mutex,
        mutex: ::std::os::raw::c_int,
        proc_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPIX_Mutex_unlock(
        hdl: MPIX_Mutex,
        mutex: ::std::os::raw::c_int,
        proc_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Grequest_class_create(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        poll_fn: MPIX_Grequest_poll_function,
        wait_fn: MPIX_Grequest_wait_function,
        greq_class: *mut MPIX_Grequest_class,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Grequest_class_allocate(
        greq_class: MPIX_Grequest_class,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Grequest_start(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        poll_fn: MPIX_Grequest_poll_function,
        wait_fn: MPIX_Grequest_wait_function,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Mutex_create(
        count: ::std::os::raw::c_int,
        comm: MPI_Comm,
        hdl: *mut MPIX_Mutex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Mutex_free(hdl: *mut MPIX_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Mutex_lock(
        hdl: MPIX_Mutex,
        mutex: ::std::os::raw::c_int,
        proc_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPIX_Mutex_unlock(
        hdl: MPIX_Mutex,
        mutex: ::std::os::raw::c_int,
        proc_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type RSMPI_Fint = MPI_Fint;
extern "C" {
    pub static RSMPI_C_BOOL: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_FLOAT: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_DOUBLE: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_INT8_T: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_INT16_T: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_INT32_T: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_INT64_T: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_UINT8_T: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_UINT16_T: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_UINT32_T: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_UINT64_T: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_DATATYPE_NULL: MPI_Datatype;
}
extern "C" {
    pub static RSMPI_COMM_WORLD: MPI_Comm;
}
extern "C" {
    pub static RSMPI_COMM_NULL: MPI_Comm;
}
extern "C" {
    pub static RSMPI_COMM_SELF: MPI_Comm;
}
extern "C" {
    pub static RSMPI_COMM_TYPE_SHARED: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_GROUP_EMPTY: MPI_Group;
}
extern "C" {
    pub static RSMPI_GROUP_NULL: MPI_Group;
}
extern "C" {
    pub static RSMPI_UNDEFINED: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_PROC_NULL: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_ANY_SOURCE: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_ANY_TAG: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_MESSAGE_NULL: MPI_Message;
}
extern "C" {
    pub static RSMPI_MESSAGE_NO_PROC: MPI_Message;
}
extern "C" {
    pub static RSMPI_REQUEST_NULL: MPI_Request;
}
extern "C" {
    pub static RSMPI_STATUS_IGNORE: *mut MPI_Status;
}
extern "C" {
    pub static RSMPI_STATUSES_IGNORE: *mut MPI_Status;
}
extern "C" {
    pub static RSMPI_IDENT: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_CONGRUENT: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_SIMILAR: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_UNEQUAL: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_THREAD_SINGLE: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_THREAD_FUNNELED: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_THREAD_SERIALIZED: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_THREAD_MULTIPLE: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_GRAPH: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_CART: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_DIST_GRAPH: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_MAX_LIBRARY_VERSION_STRING: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_MAX_PROCESSOR_NAME: ::std::os::raw::c_int;
}
extern "C" {
    pub static RSMPI_MAX: MPI_Op;
}
extern "C" {
    pub static RSMPI_MIN: MPI_Op;
}
extern "C" {
    pub static RSMPI_SUM: MPI_Op;
}
extern "C" {
    pub static RSMPI_PROD: MPI_Op;
}
extern "C" {
    pub static RSMPI_LAND: MPI_Op;
}
extern "C" {
    pub static RSMPI_BAND: MPI_Op;
}
extern "C" {
    pub static RSMPI_LOR: MPI_Op;
}
extern "C" {
    pub static RSMPI_BOR: MPI_Op;
}
extern "C" {
    pub static RSMPI_LXOR: MPI_Op;
}
extern "C" {
    pub static RSMPI_BXOR: MPI_Op;
}
extern "C" {
    pub static RSMPI_ERRORS_ARE_FATAL: MPI_Errhandler;
}
extern "C" {
    pub static RSMPI_ERRORS_RETURN: MPI_Errhandler;
}
extern "C" {
    pub static RSMPI_FILE_NULL: MPI_File;
}
extern "C" {
    pub static RSMPI_INFO_NULL: MPI_Info;
}
extern "C" {
    pub static RSMPI_WIN_NULL: MPI_Win;
}
extern "C" {
    pub fn RSMPI_Wtime() -> f64;
}
extern "C" {
    pub fn RSMPI_Wtick() -> f64;
}
extern "C" {
    pub fn RSMPI_Comm_c2f(comm: MPI_Comm) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Comm_f2c(comm: MPI_Fint) -> MPI_Comm;
}
extern "C" {
    pub fn RSMPI_Errhandler_c2f(errhandler: MPI_Errhandler) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Errhandler_f2c(errhandler: MPI_Fint) -> MPI_Errhandler;
}
extern "C" {
    pub fn RSMPI_File_c2f(file: MPI_File) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_File_f2c(file: MPI_Fint) -> MPI_File;
}
extern "C" {
    pub fn RSMPI_Group_c2f(group: MPI_Group) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Group_f2c(group: MPI_Fint) -> MPI_Group;
}
extern "C" {
    pub fn RSMPI_Info_c2f(info: MPI_Info) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Info_f2c(info: MPI_Fint) -> MPI_Info;
}
extern "C" {
    pub fn RSMPI_Message_c2f(message: MPI_Message) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Message_f2c(message: MPI_Fint) -> MPI_Message;
}
extern "C" {
    pub fn RSMPI_Op_c2f(op: MPI_Op) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Op_f2c(op: MPI_Fint) -> MPI_Op;
}
extern "C" {
    pub fn RSMPI_Request_c2f(request: MPI_Request) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Request_f2c(request: MPI_Fint) -> MPI_Request;
}
extern "C" {
    pub fn RSMPI_Type_c2f(datatype: MPI_Datatype) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Type_f2c(datatype: MPI_Fint) -> MPI_Datatype;
}
extern "C" {
    pub fn RSMPI_Win_c2f(win: MPI_Win) -> MPI_Fint;
}
extern "C" {
    pub fn RSMPI_Win_f2c(win: MPI_Fint) -> MPI_Win;
}
