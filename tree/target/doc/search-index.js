var searchIndex = JSON.parse('{\
"tree":{"doc":"Distributed Octrees in Rust","t":[0,0,12,3,6,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,5,5,11,11,11,11,11],"n":["morton","tree","0","Key","Keys","borrow","borrow_mut","clone","clone_into","cmp","eq","equal","extract","find_children","find_level","find_parent","find_siblings","fmt","from","into","less_than","log","partial_cmp","to_owned","try_from","try_into","type_id"],"q":["tree","","tree::morton","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Functionality to perform operations on Morton keys.","Functionality to create octrees in parallel.","","20 bits each for (x, y, z) coordinates and 4 bits for …","","","","","","","","Test Morton keys for equality.","Extract ‘x’, ‘y’ or ‘z’ components of Morton …","Find the children of a given Morton key.","Returns the final 4 bits of a Morton key corresponding to …","Returns the parent key of a Morton key.","Find siblings of a given Morton key.","","","","Test Morton keys for relative size using algorithm 12 in …","Implementation of $\\\\left \\\\lfloor {\\\\log_2(.)} \\\\right …","","","","",""],"i":[0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[],["key",3]],[[]],[[],["ordering",4]],[[],["bool",15]],[[["key",3]],[["bool",15],["option",4,["bool"]]]],[[["key",3],["char",15]],["u64",15]],[[["key",3]],["keys",6]],[[["key",3]],["u64",15]],[[["key",3]],["key",3]],[[["key",3]],["keys",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["key",3]],[["bool",15],["option",4,["bool"]]]],[[["u64",15]],[["i64",15],["option",4,["i64"]]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Key"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};